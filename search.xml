<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo-NexT博文书写Tips]]></title>
    <url>%2F%2Fblog%2F2018%2F07%2F31%2FHexo-NexT%E5%8D%9A%E6%96%87%E4%B9%A6%E5%86%99Tips%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[UIViewController继承时父子类方法重名造成的一个crash]]></title>
    <url>%2F%2Fblog%2F2018%2F07%2F31%2FUIViewController%E7%BB%A7%E6%89%BF%E6%97%B6%E7%88%B6%E5%AD%90%E7%B1%BB%E6%96%B9%E6%B3%95%E9%87%8D%E5%90%8D%E9%80%A0%E6%88%90%E7%9A%84%E4%B8%80%E4%B8%AAcrash%2F</url>
    <content type="text"><![CDATA[前言最近在开发过程中，遇到了一个因为UIViewController继承时父子类方法重名造成的一个crash问题，本文是问题的原因分析和解决方法。 内容1.一个crash问题的分析有如下父子类，SubViewController继承于BaseViewController，父子类中均有-addConstraintsForSubviews这个重名的私有方法。 1234567891011121314151617181920212223//父类@implementation BaseViewController- (void)viewDidLoad&#123; [super viewDidLoad]; //添加子视图 [self base_lazyLoadSubviews]; //添加约束 [self addConstraintsForSubviews];&#125;@end//子类@implementation SubViewController- (void)viewDidLoad&#123; [super viewDidLoad]; //添加子视图 [self sub_lazyLoadSubviews]; //添加约束 [self addConstraintsForSubviews];&#125;@end 实际运行过程中，遇到了如下的crash： 12345678910Terminating app due to uncaught exception &apos;NSInvalidArgumentException&apos;, reason: &apos;NSLayoutConstraint for &lt;UIImageView: 0x10bee7fa0; frame = (0 0; 0 0); opaque = NO; userInteractionEnabled = NO; layer = &lt;CALayer: 0x17023ba00&gt;&gt;: A multiplier of 0 or a nil second item together with a location for the first attribute creates an illegal constraint of a location equal to a constant. Location attributes must be specified in pairs.&apos; 上述的-addConstraintsForSubviews方法中有用到AutoLayout做自动布局，crash也是因为自动布局导致的。经过断点调试，也就是走了一遍ViewController的生命周期方法，分析出了这个crash的原因： 1.子类执行-viewDidLoad时，调用了[super viewDidLoad]，触发父类的-viewDidLoad。 2.父类的-viewDidLoad方法中实现了基础的UI加载和布局，也就是父类对应的-base_lazyLoadSubviews和-addConstraintsForSubviews这两个方法。 3.当父类执行这两个方法时，其实就已经有问题了，因为子类有同名的-addConstraintsForSubviews方法，导致父类的方法实现被子类覆盖了，此时父类会去调用子类的-addConstraintsForSubviews去布局。 4.子类此时还没有执行-sub_lazyLoadSubviews方法，也就是子类的视图控件还没有添加到父视图上，此时执行AutoLayout，就造成了crash。 2.解决方法在父类增加一些共有的UI组件，某些情况下可以简化开发，但其实更多的时候，并没有省却很多麻烦。个人建议还是不要在公有的父类中增加过多的UI特性，以免日后更多的不必要的麻烦，子类过多，已经足够引起你的重视了。当然如果只是项目中的基类，用作埋点或其他用途，那么增加其他的UI特性，更是不合适的了。下面只是基于上述问题，提出对应的解决方案。 2.1.规范命名这其实是算是一个命名不规范导致的问题，如果是父类私有的方法，还是增加前缀比较安全，所以最简单的解决方式就是改名：-base_addConstraintsForSubviews-sub_addConstraintsForSubviews 2.2.更加优雅的解决方式上一种方法其实并不是很好，因为可能遇到其他开发者继承于你的父类的问题，如果每次都要告知对方去注意这些问题，就很容易出问题了。这里提出一种参考系统的生命周期方法中回调父类的方式去解决这个问题。在父类中的头文件，声明子类容易覆写的同类型方法： 1234@interface BaseViewController : UIViewController- (void)lazyLoadSubviews NS_REQUIRES_SUPER;- (void)addConstraintsForSubviews NS_REQUIRES_SUPER;@end 方法声明过程中，使用了系统的宏NS_REQUIRES_SUPER来修饰，表示子类覆写该方法时，必须在方法内部调用super的这个方法，否则会有如下的警告（以系统的UITableViewCell的-prepareForReuse方法为例）： 这样即便子类使用者在不知情的情况下，覆写了父类的同名方法，也会有警告提示，只要执行了父类的同名方法，就可以避免上述的问题发生。 参考 iOS 修饰符~ NS_UNAVAILABLE、NS_REQUIRES_SUPER NS_REQUIRES_SUPER]]></content>
      <categories>
        <category>技术博客</category>
        <category>iOS</category>
        <category>开发随笔</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+NexT样式搭建]]></title>
    <url>%2F%2Fblog%2F2018%2F07%2F30%2FHexo-NexT%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[前言上一篇中介绍了Hexo+Github搭建个人博客的基本流程，并简单引入了一个主题，本文将基于NexT主题进一步完善个人博客的样式和具体功能。 声明：本文的方法应该是具有一定的时效性的，笔者自行操作过程中参考的文章中，大多也具有这个问题，是因为主题库的版本更新等问题，导致配置文件已经变化，对应的参数设置也发生了一些改变。 步骤下面的样式修改时，可以通过前文的hexo clean &amp;&amp; hexo s命令，进行实时访问查看，用clean是为了防止某些情况下样式修改不能及时生效。 1.安装NexT执行如下命令，XXX是指上一篇文章中的hexo的安装文件夹路径。 12$ cd XXX$ git clone https://github.com/theme-next/hexo-theme-next themes/next 2.基础配置修改XXX/_config.yml配置文件中的theme为next： 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 这里有一个坑，就是关于语言环境的设置，前文中参考其他文章的设置为： 123# Site...language: zh-Hans #中文 结果通过多次试验均未生效，通过查找资料才发现，应该设置成这样才对： 123# Site...language: zh-CN #中文 这个和如下路径的文件是对应的：XXX/themes/next/languages/zh-CN.yml，该主题支持的语言环境也都在该目录下。 3.Scheme外观4.Menu菜单集成search123456# Searchsearch: path: search.xml field: post format: html limit: 10000 集成feed12345678# 插件配置plugins: hexo-generator-feed#- hexo-generator-sitemapfeed: type: atom ##feed类型 atom或者rss2 path: atom.xml ##feed路径 limit: 20 ##feed文章最小数量]]></content>
      <categories>
        <category>技术博客</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github搭建个人博客]]></title>
    <url>%2F%2Fblog%2F2018%2F07%2F30%2FHexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言本文主要介绍了在Mac环境下，通过Hexo+Github搭建个人博客的完整操作流程，笔者参考了部分现有的文章，通过实践，排除了一些坑，并多次尝试后，整理出本文。 步骤1.安装Node.js通过Homebrew安装，会很便捷，但是事后遇到了重启终端，执行nvm命令，报-bash: npm: command not found错误，只好重头做起，在Node.js官网下载包安装，也很方便。5分钟 搭建免费个人博客一文中提到的，使用Homebrew安装Node.js的命令如下，请注意其中的注释： 12345$ brew install nvm$ mkdir ~/.nvm$ export NVM_DIR=~/.nvm$ . $(brew --prefix nvm)/nvm.sh$ nvm install 4 //这里是大坑，这个指定了安装的版本，截止到本文书写时，node的版本已经到8.x了 个人建议还是直接去官网下载包安装。 2.安装Git这个是提交之后的内容必备的，Mac自带了git，就不再赘述。 3.安装Hexo终端命令如下（Hexo官网上的安装命令是$ npm install -g hexo-cli，安装时要在前面加上sudo，否则会因为权限问题报错）： 1$ sudo npm install -g hexo 4.初始化Hexo终端cd到自己选定的一个文件夹（之后所有的hexo相关的文件都将安装在文件夹中）的上一层级目录（选定的文件夹包含于该层级下），执行hexo init命令： 12$ cd /Users/...$ hexo init XXX //XXX是对应的自己建立的文件夹的名字，用于存放之后关于hexo的所有文件 cd到XXX文件夹下，安装npm： 12$ cd XXX$ npm install 5.测试hexo执行命令，开启hexo： 1$ hexo s 执行命令后，在浏览器中访问：http://localhost:4000/看到下面的页面，说明本地访问成功，hexo的初始化工作结束： 执行下面的命令可以停止测试。 1$ Ctrl+C 6.建立Github关联的仓库在github新建一个仓库，仓库名固定为github用户名.github.io。 例如笔者的就是：kukumaluCN.github.io 获取到仓库的地址和git地址，后面使用。 7.配置_config.yml文件在之前的XXX文件夹下，有_config.yml文件，该文件是hexo的配置信息，因为不同版本，该文件的信息会有变化，所以网上的很多教程都不太适用，需要自己综合参考修改，下面的是根据笔者当前的配置列出的示例。 需要修改的基本信息如下，如果有其他需要，可以参考官网Hexo配置自行修改（注意冒号后面必须有空格）： 123456789101112131415161718# Sitetitle: 霖溦之境 #Hexo 博客标题subtitle: 霖溦的个人博客 #博客副标题description: 霖溦的个人博客author: 霖溦 #作者名language: zh-Hans #中文# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://github.com/kukumaluCN/kukumaluCN.github.io #github仓库的地址root: /# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:type: gitrepo: https://github.com/kukumaluCN/kukumaluCN.github.io.git #github仓库的git地址branch: master 8.安装hexo-deployer-git自动部署发布工具执行命令： 1$ npm install hexo-deployer-git --save 9.发布hexo修改完上述配置后，可以再次hexo s执行一次测试，看看修改后的效果。没有问题就可以发布了。 在XXX文件夹下生成静态页面，执行： 1$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 这是三个命令，clean是清理缓存，g就是generate生成静态文件，d是deploy也就是最终的部署。 具体的命令参考官网：Hexo指令 执行上述命令时，可能因为没有关联github提示输入github的用户名和密码（参考第10条，可能是deploy中repo的设置问题，改成ssh就不会遇到该提示了，前提是你的github绑定了ssh key）。 10.发布文章cd到XXX目录下，执行命令： 1$ hexo new "title" //title是要发布的文章的标题 title是要发布的文章的标题，具体规范参考Hexo指令中关于new的一项。 执行之后，会在/XXX/source/_posts路径下生成“title.md”文件，具体的书写就是标准的markdown语法了，可以自行使用习惯的md编辑器书写。 文章编辑完之后执行如下命令发布： 1$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 期间遇到了如下错误： 123remote: Invalid username or password.fatal: Authentication failed for &apos;https://github.com/kukumaluCN/kukumaluCN.github.io.git/&apos;FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html 本以为是SSH key的问题，结果发现设置过了，经过实验，发现是配置文件的问题： 1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:type: git#repo: https://github.com/kukumaluCN/kukumaluCN.github.io.git #github仓库的git地址repo: git@github.com:kukumaluCN/kukumaluCN.github.io.git #改成ssh地址branch: master 11.更换主题Hexo的主题有很多，具体参考：Thems这里以maupassant主题为例：cd XXX到刚才的目录。执行如下命令： 123$ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant$ npm install hexo-renderer-pug --save$ npm install hexo-renderer-sass --save 再次修改配置文件_config.yml，将theme的值改为maupassant。编辑完之后执行如下命令发布： 1$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 参考 5分钟 搭建免费个人博客 Mac上搭建基于GitHub的Hexo博客 如何搭建自己的博客]]></content>
      <categories>
        <category>技术博客</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于霖溦之境]]></title>
    <url>%2F%2Fblog%2F2018%2F07%2F27%2F%E5%85%B3%E4%BA%8E%E9%9C%96%E6%BA%A6%E4%B9%8B%E5%A2%83%2F</url>
    <content type="text"><![CDATA[这里是霖溦的个人博客，从今天开始将在这里陆续更新博文，博文内容不限于iOS开发技术，也包含个人爱好的点滴。 写于 2018.7.27]]></content>
      <categories>
        <category>随笔</category>
        <category>介绍</category>
      </categories>
      <tags>
        <tag>关于</tag>
      </tags>
  </entry>
</search>
