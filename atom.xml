<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>霖溦之境</title>
  
  <subtitle>霖溦的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/kukumaluCN/kukumaluCN.github.io/"/>
  <updated>2018-08-05T11:35:18.516Z</updated>
  <id>https://github.com/kukumaluCN/kukumaluCN.github.io/</id>
  
  <author>
    <name>霖溦</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一台电脑管理多个Git账户和SSH KEY</title>
    <link href="https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/08/02/%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAGit%E8%B4%A6%E6%88%B7%E5%92%8CSSH-KEY/"/>
    <id>https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/08/02/一台电脑管理多个Git账户和SSH-KEY/</id>
    <published>2018-08-02T12:26:27.000Z</published>
    <updated>2018-08-05T11:35:18.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平时开发过程中可能遇到这样的问题，就是在进行公司的项目开发时要用公司的git账号，以及对应的git仓库，比如gitlab的；对于个人的开源项目，又会有自己的git账号，以及对应的git仓库，比如github或者码云（gitee）。<br>这时就会遇到多账户提交时的冲突问题，以及对应的多个ssh key的管理的问题。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-多个ssh-key的管理"><a href="#1-多个ssh-key的管理" class="headerlink" title="1.多个ssh key的管理"></a>1.多个ssh key的管理</h2><h3 id="1-1-ssh-key的创建"><a href="#1-1-ssh-key的创建" class="headerlink" title="1.1.ssh key的创建"></a>1.1.ssh key的创建</h3><p>假如有两个git账户，分别是<a href="mailto:`github@example.com" target="_blank" rel="noopener">`github@example.com</a><code>和</code><a href="mailto:gitee@example.com" target="_blank" rel="noopener">gitee@example.com</a>`。为了提交git，我们需要设置对应的ssh key，ssh key具体其在对应平台的配置方法比较简单，本文不再详述，可参考对应的资料，这里只是ssh key的创建及管理。<br>在终端输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C "github@example.com"</span><br></pre></td></tr></table></figure><p>终端提示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/XXX/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>此时直接回车，就会在<code>/Users/XXX/.ssh/</code>路径下，创建一个名为<code>id_rsa</code>的公钥，这个并不是我们想要的，因为这里要设计多个ssh key的管理，这个命名没有任何特征。</p><p>在终端中输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> /Users/XXX/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><p>表示这个是github平台的key，之后根据终端提示，输入并确认密码，就可以生成了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /Users/XXX/.ssh/id_rsa_github.</span><br><span class="line">Your public key has been saved in /Users/XXX/.ssh/id_rsa_github.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>同理，另一个ssh key的创建流程如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-keygen -t rsa -C "gitee@example.com"</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/XXX/.ssh/id_rsa): </span><br><span class="line"><span class="meta">$</span> /Users/XXX/.ssh/id_rsa_gitee</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /Users/XXX/.ssh/id_rsa_gitee.</span><br><span class="line">Your public key has been saved in /Users/XXX/.ssh/id_rsa_gitee.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="1-2-配置ssh代理"><a href="#1-2-配置ssh代理" class="headerlink" title="1.2.配置ssh代理"></a>1.2.配置ssh代理</h3><p>创建好了上面的多个ssh key就可以开始管理他们了。<br>在终端中输入如下命令，查询系统ssh key的代理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-add -l</span><br></pre></td></tr></table></figure><p>如果系统已经设置了代理，需要删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-add -D</span><br><span class="line">All identities removed.</span><br></pre></td></tr></table></figure><p>如果提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Could not open a connection to your authentication agent.</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> exec ssh-agent bash</span><br></pre></td></tr></table></figure><p>接下来添加刚才创建的ssh key的私钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//第一个</span><br><span class="line"><span class="meta">$</span> ssh-add ~/.ssh/id_rsa_github</span><br><span class="line">Enter passphrase for /Users/XXX/.ssh/id_rsa_github: </span><br><span class="line">Identity added: /Users/XXX/.ssh/id_rsa_github (/Users/XXX/.ssh/id_rsa_github)</span><br><span class="line"></span><br><span class="line">//第二个</span><br><span class="line"><span class="meta">$</span> ssh-add ~/.ssh/id_rsa_gitee</span><br><span class="line">Enter passphrase for /Users/XXX/.ssh/id_rsa_gitee: </span><br><span class="line">Identity added: /Users/XXX/.ssh/id_rsa_gitee (/Users/XXX/.ssh/id_rsa_gitee)</span><br></pre></td></tr></table></figure><h3 id="1-3-添加公钥"><a href="#1-3-添加公钥" class="headerlink" title="1.3.添加公钥"></a>1.3.添加公钥</h3><p>其实就是将对应的.pub中的内容，复制到对应平台的ssh key管理栏目中，不同的平台，位置不同，可以去对应的个人中心的设置中查看，很容易找到。</p><h3 id="1-4-配置文件config"><a href="#1-4-配置文件config" class="headerlink" title="1.4.配置文件config"></a>1.4.配置文件config</h3><p>在/.ssh目录下创建config配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> vim ~/.ssh/config</span><br></pre></td></tr></table></figure><p>熟悉vim的可以直接在终端中编辑这个config文件，不熟悉的，打开指定目录下新创建的config文件，直接文本编辑即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> github配置</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> gitee配置</span><br><span class="line">Host gitee.com</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitee</span><br></pre></td></tr></table></figure><p>编辑保存后，再次查看ssh key的代理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh-add -l</span><br></pre></td></tr></table></figure><p>如果看到如下，说明设置成功了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2048 SHA256:............ /Users/XXX/.ssh/id_rsa_github (RSA)</span><br><span class="line">2048 SHA256:............ /Users/XXX/.ssh/id_rsa_gitee (RSA)</span><br></pre></td></tr></table></figure><h3 id="1-5-验证ssh-key"><a href="#1-5-验证ssh-key" class="headerlink" title="1.5.验证ssh key"></a>1.5.验证ssh key</h3><p>终端中输入如下验证命令，如果返回如下，说明配置成功了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ssh -T git@github.com</span><br><span class="line">Hi XXXXXX! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> ssh -T git@gitee.com</span><br><span class="line">Hi XXXXXX! You've successfully authenticated, but Gitee.com does not provide shell access.</span><br></pre></td></tr></table></figure><p>如果遇到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permission denied (publickey)</span><br></pre></td></tr></table></figure><p>就是之前的公钥设置的问题，需要去对应的平台检查下ssh key公钥是否设置成功。<br>至此，ssh key的配置管理就结束了。</p><h2 id="2-多个git账户的提交问题"><a href="#2-多个git账户的提交问题" class="headerlink" title="2.多个git账户的提交问题"></a>2.多个git账户的提交问题</h2><p>我们大多数人都会使用第三方工具进行git提交，比如source tree之类的，这些工具在提交时，如果不对对应的git仓库进行专门的配置，会默认走git的全局配置，也就是会用默认的全局配置的账户进行git提交。一不小心，就会用我们私人的账户，进行了公司项目的git提交，生成了对应的提交记录，也有可能因为权限问题，导致直接提交失败。<br>这时，我们需要对不同的仓库，进行对应的配置。</p><h3 id="2-1-检查全局配置"><a href="#2-1-检查全局配置" class="headerlink" title="2.1.检查全局配置"></a>2.1.检查全局配置</h3><p>在终端中，分别输入如下命令，可以检查目前电脑中的git的全局配置信息，如果没有返回，说明没有全局配置，如果有，就可以看到对应的默认的账户是那个了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global user.name</span><br><span class="line"><span class="meta">$</span> git config --global user.email</span><br></pre></td></tr></table></figure><p>为了避免麻烦，我们可以取消全局配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --global --unset user.name</span><br><span class="line"><span class="meta">$</span> git config --global --unset user.email</span><br></pre></td></tr></table></figure><h3 id="2-2-全局配置和局部配置"><a href="#2-2-全局配置和局部配置" class="headerlink" title="2.2.全局配置和局部配置"></a>2.2.全局配置和局部配置</h3><p>此时已经取消了电脑中默认的git全局配置信息，此时进行git提交，会报对应的找不到账户信息的错误。<br>我们可以cd到对应的git仓库的根目录下，执行局部git配置命令。比如<code>/Users/XXX/github/DemoProject</code>是一个在github平台托管的本地git仓库的根目录，我们可以执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /Users/XXX/github/DemoProject</span><br><span class="line"><span class="meta">$</span> git config user.name</span><br><span class="line"><span class="meta">$</span> git config user.email</span><br></pre></td></tr></table></figure><p>如果返回均为空，说明没有进行过局部配置，可以分别配置github的账户名和邮箱：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config user.name "github账户名"</span><br><span class="line"><span class="meta">$</span> git config user.email "github@example.com"</span><br></pre></td></tr></table></figure><p>同理，在不同的git仓库下，可以分别配置不同平台的git账户名和git邮箱。这虽然看起来麻烦，不过，只要设置完成，之后只要不再更改对应的git仓库的路径，就不需要再更换配置了。<br><strong>而且，即便我们没有取消默认的全局git配置，在进行了局部配置后，后者的优先级会更高。</strong></p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git config --list</span><br></pre></td></tr></table></figure><p>可以查看查看当前仓库的具体配置信息，在当前仓库目录下查看的配置是全局配置+当前项目的局部配置，<strong>使用的时候会优先使用当前仓库的局部配置，如果没有，才会去读取全局配置。</strong></p><h3 id="2-3-hexo部署时的git提交问题"><a href="#2-3-hexo部署时的git提交问题" class="headerlink" title="2.3.hexo部署时的git提交问题"></a>2.3.hexo部署时的git提交问题</h3><p>因为我们先前取消了电脑中的git全局配置，hexo在部署发布时，可能遇到如下问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*** Please tell me who you are.</span><br><span class="line"></span><br><span class="line">Run</span><br><span class="line"></span><br><span class="line">  git config --global user.email "you@example.com"</span><br><span class="line">  git config --global user.name "Your Name"</span><br><span class="line"></span><br><span class="line">to set your account's default identity.</span><br><span class="line">Omit --global to set the identity only in this repository.</span><br></pre></td></tr></table></figure><p>不知道是不是因为hexo必须要求读取全局配置，设置了几个文件夹的局部git配置，均无效，只好又恢复了全局配置，也就是对应的github的账户信息，因为之前提到过，局部配置的优先级大于全局配置，所以不用担心账户冲突的问题，只要设置好对应仓库的局部配置信息，就不用担心全局配置的存在。<br>当然，这只是折中的方案，如果有人知道如何配置hexo仓库的局部配置信息，欢迎指教。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.csdn.net/wwmusic/article/details/51027458" target="_blank" rel="noopener">一台电脑如何管理多个SSH KEY</a></li><li><a href="https://www.jianshu.com/p/a869072a0092" target="_blank" rel="noopener">同一台电脑关于多个SSH KEY管理</a></li><li><a href="https://blog.csdn.net/yanzhenjie1003/article/details/69487932?locationNum=4&amp;fps=1" target="_blank" rel="noopener">Git管理多个SSH密钥，Git多帐号配置</a></li><li><a href="http://www.cnblogs.com/zichi/p/4704824.html" target="_blank" rel="noopener">如何配置多个ssh key</a></li><li><a href="https://blog.csdn.net/baidu_35738377/article/details/54580156" target="_blank" rel="noopener">Git配置多账号登录不同项目</a></li><li><a href="https://blog.csdn.net/luohai859/article/details/50679859" target="_blank" rel="noopener">Git全局配置和单个仓库的用户名邮箱配置</a></li><li><a href="https://www.cnblogs.com/chenwolong/p/GIT.html" target="_blank" rel="noopener">GIT 常用命令</a></li></ol><hr><blockquote><p><strong>本文作者：</strong>霖溦<br><strong>本文链接：</strong><a href="https://kukumalucn.github.io/blog/2018/08/02/一台电脑管理多个Git账户和SSH-KEY/" target="_blank" rel="noopener">https://kukumalucn.github.io/blog/2018/08/02/一台电脑管理多个Git账户和SSH-KEY/</a><br><strong>版权声明：</strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">CC BY-NC-ND 4.0</a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;平时开发过程中可能遇到这样的问题，就是在进行公司的项目开发时要用公司的git账号，以及对应的git仓库，比如gitlab的；对于个人的开源项
      
    
    </summary>
    
      <category term="技术博客" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Git" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/Git/"/>
    
    
      <category term="Git" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/tags/Git/"/>
    
      <category term="SSH KEY" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/tags/SSH-KEY/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods中PBXSourcesBuildPhase unknown UUID的错误解决</title>
    <link href="https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/08/01/CocoaPods%E4%B8%ADPBXSourcesBuildPhase-unknown-UUID%E7%9A%84%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    <id>https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/08/01/CocoaPods中PBXSourcesBuildPhase-unknown-UUID的错误解决/</id>
    <published>2018-08-01T09:07:01.000Z</published>
    <updated>2018-08-02T12:29:23.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>在执行<code>pod install</code>命令时，出现了如下的警告：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[!] `&lt;PBXResourcesBuildPhase UUID=`XXX`&gt;` </span><br><span class="line">attempted to initialize an object with an </span><br><span class="line">unknown UUID. `XXX` for attribute: `files`. </span><br><span class="line">This can be the result of a merge and  the </span><br><span class="line">unknown UUID is being discarded.</span><br></pre></td></tr></table></figure></p><p>解决方式如下：</p><ul><li>1.打开项目-&gt;Target-&gt;General-&gt;Linked Frameworks and Libraries，选中libpods-XXX.a，XXX是指你的项目名称，点“-”删除。</li><li>2.退出Xcode</li><li>3.重新执行pod install</li></ul><p><img src="http://pcriprrao.bkt.clouddn.com/2018-08-01-libpoda.png" alt="libpoda"></p><hr><blockquote><p><strong>本文作者：</strong>霖溦<br><strong>本文链接：</strong><a href="https://kukumalucn.github.io/blog/2018/08/01/CocoaPods中PBXSourcesBuildPhase-unknown-UUID的错误解决/" target="_blank" rel="noopener">https://kukumalucn.github.io/blog/2018/08/01/CocoaPods中PBXSourcesBuildPhase-unknown-UUID的错误解决/</a><br><strong>版权声明：</strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">CC BY-NC-ND 4.0</a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips&quot;&gt;&lt;/a&gt;Tips&lt;/h1&gt;&lt;p&gt;在执行&lt;code&gt;pod install&lt;/code&gt;命令时，出现了如下的警告：&lt;br&gt;&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="技术博客" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="iOS" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/iOS/"/>
    
      <category term="开发Tips" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/iOS/%E5%BC%80%E5%8F%91Tips/"/>
    
    
      <category term="iOS" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods中的Smart quotes were detected...警告</title>
    <link href="https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/08/01/CocoaPods%E4%B8%AD%E7%9A%84Smart-quotes-were-detected-%E8%AD%A6%E5%91%8A/"/>
    <id>https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/08/01/CocoaPods中的Smart-quotes-were-detected-警告/</id>
    <published>2018-08-01T08:46:36.000Z</published>
    <updated>2018-08-01T09:16:58.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>在执行<code>pod install</code>命令时，出现了如下的警告：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[!] Smart quotes were detected and ignored in </span><br><span class="line">your Podfile. To avoid issues in the future, </span><br><span class="line">you should not use TextEdit for editing it. </span><br><span class="line">If you are not using TextEdit, you should </span><br><span class="line">turn off smart quotes in your editor of choice.</span><br></pre></td></tr></table></figure></p><p>大致的意思是：在Podfile文件中，引号被智能的检测到并被忽略。</p><p>通过检查Podfile文件，发现了如下代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target <span class="string">'Demo’ do</span></span><br></pre></td></tr></table></figure><p>这明显是因为输入法切换导致的右引号写成了中文的单引号，这个问题很难被发现，即便没什么影响，但是改一下就可以消除警告，何乐为不为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target <span class="string">'Demo'</span> <span class="keyword">do</span></span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>本文作者：</strong>霖溦<br><strong>本文链接：</strong><a href="https://kukumalucn.github.io/blog/2018/08/01/CocoaPods中的Smart-quotes-were-detected-警告/" target="_blank" rel="noopener">https://kukumalucn.github.io/blog/2018/08/01/CocoaPods中的Smart-quotes-were-detected-警告/</a><br><strong>版权声明：</strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">CC BY-NC-ND 4.0</a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips&quot;&gt;&lt;/a&gt;Tips&lt;/h1&gt;&lt;p&gt;在执行&lt;code&gt;pod install&lt;/code&gt;命令时，出现了如下的警告：&lt;br&gt;&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="技术博客" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="iOS" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/iOS/"/>
    
      <category term="开发Tips" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/iOS/%E5%BC%80%E5%8F%91Tips/"/>
    
    
      <category term="iOS" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>UIViewController继承时父子类方法重名造成的一个crash</title>
    <link href="https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/07/31/UIViewController%E7%BB%A7%E6%89%BF%E6%97%B6%E7%88%B6%E5%AD%90%E7%B1%BB%E6%96%B9%E6%B3%95%E9%87%8D%E5%90%8D%E9%80%A0%E6%88%90%E7%9A%84%E4%B8%80%E4%B8%AAcrash/"/>
    <id>https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/07/31/UIViewController继承时父子类方法重名造成的一个crash/</id>
    <published>2018-07-31T05:30:44.000Z</published>
    <updated>2018-08-02T12:29:26.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在开发过程中，遇到了一个因为UIViewController继承时父子类方法重名造成的一个crash问题，本文是问题的原因分析和解决方法。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="1-一个crash问题的分析"><a href="#1-一个crash问题的分析" class="headerlink" title="1.一个crash问题的分析"></a>1.一个crash问题的分析</h2><p>有如下父子类，<code>SubViewController</code>继承于<code>BaseViewController</code>，父子类中均有<code>-addConstraintsForSubviews</code>这个重名的私有方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//父类</span><br><span class="line">@implementation BaseViewController</span><br><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];    </span><br><span class="line">    //添加子视图</span><br><span class="line">    [self base_lazyLoadSubviews];</span><br><span class="line">    //添加约束</span><br><span class="line">    [self addConstraintsForSubviews];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//子类</span><br><span class="line">@implementation SubViewController</span><br><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];    </span><br><span class="line">    //添加子视图</span><br><span class="line">    [self sub_lazyLoadSubviews];</span><br><span class="line">    //添加约束</span><br><span class="line">    [self addConstraintsForSubviews];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>实际运行过程中，遇到了如下的crash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Terminating app due to uncaught exception </span><br><span class="line">&apos;NSInvalidArgumentException&apos;, reason: </span><br><span class="line">&apos;NSLayoutConstraint for &lt;UIImageView: </span><br><span class="line">0x10bee7fa0; frame = (0 0; 0 0); opaque = NO; </span><br><span class="line">userInteractionEnabled = NO; layer = &lt;CALayer: </span><br><span class="line">0x17023ba00&gt;&gt;: A multiplier of 0 or a nil </span><br><span class="line">second item together with a location for the </span><br><span class="line">first attribute creates an illegal constraint </span><br><span class="line">of a location equal to a constant. Location </span><br><span class="line">attributes must be specified in pairs.&apos;</span><br></pre></td></tr></table></figure><p>上述的<code>-addConstraintsForSubviews</code>方法中有用到AutoLayout做自动布局，crash也是因为自动布局导致的。<br>经过断点调试，也就是走了一遍ViewController的生命周期方法，分析出了这个crash的原因：</p><ul><li>1.子类执行<code>-viewDidLoad</code>时，调用了<code>[super viewDidLoad]</code>，触发父类的<code>-viewDidLoad</code>。</li><li>2.父类的<code>-viewDidLoad</code>方法中实现了基础的UI加载和布局，也就是父类对应的<code>-base_lazyLoadSubviews</code>和<code>-addConstraintsForSubviews</code>这两个方法。</li><li>3.当父类执行这两个方法时，其实就已经有问题了，因为子类有同名的<code>-addConstraintsForSubviews</code>方法，导致父类的方法实现被子类覆盖了，此时父类会去调用子类的<code>-addConstraintsForSubviews</code>去布局。</li><li>4.子类此时还没有执行<code>-sub_lazyLoadSubviews</code>方法，也就是子类的视图控件还没有添加到父视图上，此时执行AutoLayout，就造成了crash。</li></ul><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><p>在父类增加一些共有的UI组件，某些情况下可以简化开发，但其实更多的时候，并没有省却很多麻烦。个人建议还是不要在公有的父类中增加过多的UI特性，以免日后更多的不必要的麻烦，子类过多，已经足够引起你的重视了。当然如果只是项目中的基类，用作埋点或其他用途，那么增加其他的UI特性，更是不合适的了。<br>下面只是基于上述问题，提出对应的解决方案。</p><h3 id="2-1-规范命名"><a href="#2-1-规范命名" class="headerlink" title="2.1.规范命名"></a>2.1.规范命名</h3><p>这其实是算是一个命名不规范导致的问题，如果是父类私有的方法，还是增加前缀比较安全，所以最简单的解决方式就是改名：<br><code>-base_addConstraintsForSubviews</code><br><code>-sub_addConstraintsForSubviews</code></p><h3 id="2-2-更加优雅的解决方式"><a href="#2-2-更加优雅的解决方式" class="headerlink" title="2.2.更加优雅的解决方式"></a>2.2.更加优雅的解决方式</h3><p>上一种方法其实并不是很好，因为可能遇到其他开发者继承于你的父类的问题，如果每次都要告知对方去注意这些问题，就很容易出问题了。<br>这里提出一种参考系统的生命周期方法中回调父类的方式去解决这个问题。<br>在父类中的头文件，声明子类容易覆写的同类型方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@interface BaseViewController : UIViewController</span><br><span class="line">- (void)lazyLoadSubviews NS_REQUIRES_SUPER;</span><br><span class="line">- (void)addConstraintsForSubviews NS_REQUIRES_SUPER;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>方法声明过程中，使用了系统的宏<code>NS_REQUIRES_SUPER</code>来修饰，表示子类覆写该方法时，必须在方法内部调用super的这个方法，否则会有如下的警告（以系统的<code>UITableViewCell</code>的<code>-prepareForReuse</code>方法为例）：</p><p><img src="http://pcriprrao.bkt.clouddn.com/2018-08-01-UIViewController继承时父子类方法重名造成的一个crash-NS_REQUIRES_SUPE.png" alt="UIViewController继承时父子类方法重名造成的一个crash-NS_REQUIRES_SUPE"></p><p>这样即便子类使用者在不知情的情况下，覆写了父类的同名方法，也会有警告提示，只要执行了父类的同名方法，就可以避免上述的问题发生。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.csdn.net/shihuboke/article/details/78200339" target="_blank" rel="noopener">iOS 修饰符~ NS_UNAVAILABLE、NS_REQUIRES_SUPER</a></li><li><a href="https://www.dudas.co.uk/ns_requires_super/" target="_blank" rel="noopener">NS_REQUIRES_SUPER</a></li></ol><hr><blockquote><p><strong>本文作者：</strong>霖溦<br><strong>本文链接：</strong><a href="https://kukumalucn.github.io/blog/2018/07/31/UIViewController继承时父子类方法重名造成的一个crash/" target="_blank" rel="noopener">https://kukumalucn.github.io/blog/2018/07/31/UIViewController继承时父子类方法重名造成的一个crash/</a><br><strong>版权声明：</strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">CC BY-NC-ND 4.0</a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近在开发过程中，遇到了一个因为UIViewController继承时父子类方法重名造成的一个crash问题，本文是问题的原因分析和解决方法
      
    
    </summary>
    
      <category term="技术博客" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="iOS" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/iOS/"/>
    
      <category term="开发随笔" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/iOS/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="iOS" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/tags/iOS/"/>
    
      <category term="继承" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建个人博客</title>
    <link href="https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/07/30/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/07/30/Hexo-Github搭建个人博客/</id>
    <published>2018-07-30T06:59:56.000Z</published>
    <updated>2018-08-02T12:29:26.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要介绍了在Mac环境下，通过Hexo+Github搭建个人博客的完整操作流程，笔者参考了部分现有的文章，通过实践，排除了一些坑，并多次尝试后，整理出本文。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h2><p>通过Homebrew安装，会很便捷，但是事后遇到了重启终端，执行<code>nvm</code>命令，报<code>-bash: npm: command not found</code>错误，只好重头做起，在<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>官网下载包安装，也很方便。<br><a href="https://www.jianshu.com/p/4eaddcbe4d12" target="_blank" rel="noopener">5分钟 搭建免费个人博客</a>一文中提到的，使用Homebrew安装Node.js的命令如下，请注意其中的注释：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> brew install nvm</span><br><span class="line"><span class="meta">$</span> mkdir ~/.nvm</span><br><span class="line"><span class="meta">$</span> export NVM_DIR=~/.nvm</span><br><span class="line"><span class="meta">$</span> . $(brew --prefix nvm)/nvm.sh</span><br><span class="line"><span class="meta">$</span> nvm install 4 //这里是大坑，这个指定了安装的版本，截止到本文书写时，node的版本已经到8.x了</span><br></pre></td></tr></table></figure><p>个人建议还是直接去官网下载包安装。</p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h2><p>这个是提交之后的内容必备的，Mac自带了git，就不再赘述。</p><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h2><p>终端命令如下（Hexo官网上的安装命令是<code>$ npm install -g hexo-cli</code>，安装时要在前面加上sudo，否则会因为权限问题报错）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo npm install -g hexo</span><br></pre></td></tr></table></figure><h2 id="4-初始化Hexo"><a href="#4-初始化Hexo" class="headerlink" title="4.初始化Hexo"></a>4.初始化Hexo</h2><p>终端cd到自己选定的一个文件夹（之后所有的hexo相关的文件都将安装在文件夹中）的上一层级目录（选定的文件夹包含于该层级下），执行hexo init命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /Users/...</span><br><span class="line"><span class="meta">$</span> hexo init XXX //XXX是对应的自己建立的文件夹的名字，用于存放之后关于hexo的所有文件</span><br></pre></td></tr></table></figure><p>cd到XXX文件夹下，安装npm：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd XXX</span><br><span class="line"><span class="meta">$</span> npm install</span><br></pre></td></tr></table></figure><h2 id="5-测试hexo"><a href="#5-测试hexo" class="headerlink" title="5.测试hexo"></a>5.测试hexo</h2><p>执行命令，开启hexo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo s</span><br></pre></td></tr></table></figure><p>执行命令后，在浏览器中访问：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>看到下面的页面，说明本地访问成功，hexo的初始化工作结束：</p><p><img src="http://pcriprrao.bkt.clouddn.com/2018-08-01-Hexo-Github搭建个人博客-测试hexo.jpg" alt="Hexo-Github搭建个人博客-测试hexo"></p><p>执行下面的命令可以停止测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> Ctrl+C</span><br></pre></td></tr></table></figure><h2 id="6-建立Github关联的仓库"><a href="#6-建立Github关联的仓库" class="headerlink" title="6.建立Github关联的仓库"></a>6.建立Github关联的仓库</h2><p>在github新建一个仓库，仓库名固定为<code>github用户名.github.io</code>。</p><p>例如笔者的就是：<a href="https://github.com/kukumaluCN/kukumaluCN.github.io">kukumaluCN.github.io</a></p><p>获取到仓库的地址和git地址，后面使用。</p><h2 id="7-配置-config-yml文件"><a href="#7-配置-config-yml文件" class="headerlink" title="7.配置_config.yml文件"></a>7.配置_config.yml文件</h2><p>在之前的XXX文件夹下，有<code>_config.yml</code>文件，该文件是hexo的配置信息，因为不同版本，该文件的信息会有变化，所以网上的很多教程都不太适用，需要自己综合参考修改，下面的是根据笔者当前的配置列出的示例。</p><p>需要修改的基本信息如下，如果有其他需要，可以参考官网<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">Hexo配置</a>自行修改（注意冒号后面必须有空格）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 霖溦之境 #Hexo 博客标题</span><br><span class="line">subtitle: 霖溦的个人博客 #博客副标题</span><br><span class="line">description: 霖溦的个人博客</span><br><span class="line">author: 霖溦 #作者名</span><br><span class="line">language: zh-Hans #中文</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: https://github.com/kukumaluCN/kukumaluCN.github.io #github仓库的地址</span><br><span class="line">root: /</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https://github.com/kukumaluCN/kukumaluCN.github.io.git #github仓库的git地址</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><h2 id="8-安装hexo-deployer-git自动部署发布工具"><a href="#8-安装hexo-deployer-git自动部署发布工具" class="headerlink" title="8.安装hexo-deployer-git自动部署发布工具"></a>8.安装hexo-deployer-git自动部署发布工具</h2><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="9-发布hexo"><a href="#9-发布hexo" class="headerlink" title="9.发布hexo"></a>9.发布hexo</h2><p>修改完上述配置后，可以再次hexo s执行一次测试，看看修改后的效果。没有问题就可以发布了。</p><p>在XXX文件夹下生成静态页面，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>这是三个命令，clean是清理缓存，g就是generate生成静态文件，d是deploy也就是最终的部署。</p><p>具体的命令参考官网：<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Hexo指令</a></p><p>执行上述命令时，可能因为没有关联github提示输入github的用户名和密码（<strong>参考第10条，可能是deploy中repo的设置问题，改成ssh就不会遇到该提示了，前提是你的github绑定了ssh key</strong>）。</p><h2 id="10-发布文章"><a href="#10-发布文章" class="headerlink" title="10.发布文章"></a>10.发布文章</h2><p>cd到XXX目录下，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new "title" //title是要发布的文章的标题</span><br></pre></td></tr></table></figure><p>title是要发布的文章的标题，具体规范参考<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Hexo指令</a>中关于new的一项。</p><p>执行之后，会在/XXX/source/_posts路径下生成“title.md”文件，具体的书写就是标准的markdown语法了，可以自行使用习惯的md编辑器书写。</p><p>文章编辑完之后执行如下命令发布：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>期间遇到了如下错误：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remote: Invalid username or password.</span><br><span class="line">fatal: Authentication failed for &apos;https://github.com/kukumaluCN/kukumaluCN.github.io.git/&apos;</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>本以为是SSH key的问题，结果发现设置过了，经过实验，发现是配置文件的问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Deployment</span><br><span class="line"><span class="meta">#</span># Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line"><span class="meta">#</span>repo: https://github.com/kukumaluCN/kukumaluCN.github.io.git #github仓库的git地址</span><br><span class="line">repo: git@github.com:kukumaluCN/kukumaluCN.github.io.git #改成ssh地址</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><h2 id="11-更换主题"><a href="#11-更换主题" class="headerlink" title="11.更换主题"></a>11.更换主题</h2><p>Hexo的主题有很多，具体参考：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Thems</a><br>这里以<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">maupassant</a>主题为例：<br>cd XXX到刚才的目录。<br>执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class="line"><span class="meta">$</span> npm install hexo-renderer-pug --save</span><br><span class="line"><span class="meta">$</span> npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure><p>再次修改配置文件_config.yml，将theme的值改为maupassant。<br>编辑完之后执行如下命令发布：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.jianshu.com/p/4eaddcbe4d12" target="_blank" rel="noopener">5分钟 搭建免费个人博客</a></li><li><a href="https://www.jianshu.com/p/13e64c9e2295" target="_blank" rel="noopener">Mac上搭建基于GitHub的Hexo博客</a></li><li><a href="https://yegod.github.io/blog-1/" target="_blank" rel="noopener">如何搭建自己的博客</a></li></ol><hr><blockquote><p><strong>本文作者：</strong>霖溦<br><strong>本文链接：</strong><a href="https://kukumalucn.github.io/blog/2018/07/30/Hexo-Github搭建个人博客/" target="_blank" rel="noopener">https://kukumalucn.github.io/blog/2018/07/30/Hexo-Github搭建个人博客/</a><br><strong>版权声明：</strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">CC BY-NC-ND 4.0</a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文主要介绍了在Mac环境下，通过Hexo+Github搭建个人博客的完整操作流程，笔者参考了部分现有的文章，通过实践，排除了一些坑，并多次
      
    
    </summary>
    
      <category term="技术博客" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于霖溦之境</title>
    <link href="https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/07/27/%E5%85%B3%E4%BA%8E%E9%9C%96%E6%BA%A6%E4%B9%8B%E5%A2%83/"/>
    <id>https://github.com/kukumaluCN/kukumaluCN.github.io//blog/2018/07/27/关于霖溦之境/</id>
    <published>2018-07-27T09:34:16.000Z</published>
    <updated>2018-08-02T12:29:26.433Z</updated>
    
    <content type="html"><![CDATA[<p>这里是霖溦的个人博客，从今天开始将在这里陆续更新博文，博文内容不限于iOS开发技术，也包含个人爱好的点滴。</p><p><strong>写于 2018.7.27</strong></p><hr><blockquote><p><strong>本文作者：</strong>霖溦<br><strong>本文链接：</strong><a href="https://kukumalucn.github.io/blog/2018/07/27/关于霖溦之境/" target="_blank" rel="noopener">https://kukumalucn.github.io/blog/2018/07/27/关于霖溦之境/</a><br><strong>版权声明：</strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">CC BY-NC-ND 4.0</a> 许可协议。转载请注明出处！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里是霖溦的个人博客，从今天开始将在这里陆续更新博文，博文内容不限于iOS开发技术，也包含个人爱好的点滴。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写于 2018.7.27&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文作者：&lt;/strong
      
    
    </summary>
    
      <category term="随笔" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="介绍" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/categories/%E9%9A%8F%E7%AC%94/%E4%BB%8B%E7%BB%8D/"/>
    
    
      <category term="关于" scheme="https://github.com/kukumaluCN/kukumaluCN.github.io/tags/%E5%85%B3%E4%BA%8E/"/>
    
  </entry>
  
</feed>
